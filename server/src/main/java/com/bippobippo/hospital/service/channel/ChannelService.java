package com.bippobippo.hospital.service.channel;

import com.bippobippo.hospital.dto.request.channel.ChannelApprovalRequest;
import com.bippobippo.hospital.dto.request.channel.ChannelRequest;
import com.bippobippo.hospital.dto.response.channel.ChannelApprovalResponse;
import com.bippobippo.hospital.dto.response.channel.ChannelResponse;
import com.bippobippo.hospital.entity.channel.Channel;
import com.bippobippo.hospital.entity.channel.ChannelApprovalStatus;
import com.bippobippo.hospital.entity.channel.ChannelSourceType;
import com.bippobippo.hospital.repository.channel.ChannelRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class ChannelService {
    
    @Autowired
    private ChannelRepository channelRepository;

    // 채널 생성
    @Transactional
    public ChannelResponse createChannel(ChannelRequest request) {
        Channel channel = new Channel();
        channel.setName(request.getName());
        channel.setDescription(request.getDescription());
        channel.setImageUrl(request.getImageUrl());
        channel.setChannelUri(request.getChannelUri());
        channel.setSourceType(request.getSourceType());
        channel.setIsAutoGenerated(request.getIsAutoGenerated());
        channel.setApprovalStatus(ChannelApprovalStatus.PENDING);
        
        return ChannelResponse.from(channelRepository.save(channel));
    }

    // 채널 수정
    @Transactional
    public ChannelResponse updateChannel(Long id, ChannelRequest request) {
        Channel channel = channelRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Channel not found"));
        
        channel.setName(request.getName());
        channel.setDescription(request.getDescription());
        channel.setImageUrl(request.getImageUrl());
        channel.setChannelUri(request.getChannelUri());
        channel.setSourceType(request.getSourceType());
        channel.setIsAutoGenerated(request.getIsAutoGenerated());
        
        return ChannelResponse.from(channelRepository.save(channel));
    }

    // 채널 삭제 (소프트 삭제)
    @Transactional
    public void deleteChannel(Long id) {
        Channel channel = channelRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Channel not found"));
        channel.setIsActive(false);
        channelRepository.save(channel);
    }

    // 채널 승인 처리
    @Transactional
    public ChannelResponse processApproval(Long id, ChannelApprovalRequest request) {
        Channel channel = channelRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("채널을 찾을 수 없습니다."));

        channel.setApprovalStatus(request.getStatus());
        if (request.getStatus() == ChannelApprovalStatus.REJECTED) {
            channel.setRejectionReason(request.getRejectionReason());
        }

        return convertToResponse(channelRepository.save(channel));
    }

    // 활성화된 채널 목록 조회
    public List<ChannelResponse> getActiveChannels() {
        return channelRepository.findByIsActiveTrue().stream()
            .map(ChannelResponse::from)
            .collect(Collectors.toList());
    }

    // 승인된 채널 목록 조회
    public List<ChannelResponse> getApprovedChannels() {
        return channelRepository.findByApprovalStatus(ChannelApprovalStatus.APPROVED).stream()
            .map(ChannelResponse::from)
            .collect(Collectors.toList());
    }

    // 승인 대기 중인 채널 목록 조회
    public List<ChannelResponse> getPendingChannels() {
        return channelRepository.findByApprovalStatus(ChannelApprovalStatus.PENDING).stream()
            .map(ChannelResponse::from)
            .collect(Collectors.toList());
    }

    // 소스 타입별 채널 목록 조회
    public List<ChannelResponse> getChannelsBySourceType(ChannelSourceType sourceType) {
        return channelRepository.findBySourceType(sourceType).stream()
            .map(ChannelResponse::from)
            .collect(Collectors.toList());
    }

    private ChannelResponse convertToResponse(Channel channel) {
        ChannelResponse response = new ChannelResponse();
        response.setId(channel.getId());
        response.setName(channel.getName());
        response.setDescription(channel.getDescription());
        response.setImageUrl(channel.getImageUrl());
        response.setChannelUri(channel.getChannelUri());
        response.setSourceType(channel.getSourceType());
        response.setIsAutoGenerated(channel.getIsAutoGenerated());
        response.setApprovalStatus(channel.getApprovalStatus());
        response.setRejectionReason(channel.getRejectionReason());
        response.setCreatedAt(channel.getCreatedAt());
        response.setLastUpdated(channel.getLastUpdated());
        return response;
    }
} 