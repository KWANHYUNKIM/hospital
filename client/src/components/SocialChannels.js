import React, { useState, useEffect, useContext } from 'react';
import { getSocialChannels, createChannel, updateChannel, deleteChannel, approveChannel } from '../service/socialApi';
import { AuthContext } from '../context/AuthContext';

export default function SocialChannels() {
  const { user } = useContext(AuthContext);
  const [channels, setChannels] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedChannel, setSelectedChannel] = useState(null);
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    imageUrl: '',
    channelUri: '',
    sourceType: 'MANUAL',
    isAutoGenerated: false
  });

  useEffect(() => {
    const fetchChannels = async () => {
      try {
        const response = await getSocialChannels();
        setChannels(response);
        setIsAdmin(user?.role === 'ADMIN');
      } catch (err) {
        setError('채널 정보를 불러오는데 실패했습니다.');
      } finally {
        setLoading(false);
      }
    };

    fetchChannels();
  }, [user]);

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (selectedChannel) {
        await updateChannel(selectedChannel.id, formData);
      } else {
        await createChannel(formData);
      }
      const response = await getSocialChannels();
      setChannels(response);
      setShowAddModal(false);
      setShowEditModal(false);
      setSelectedChannel(null);
      setFormData({
        name: '',
        description: '',
        imageUrl: '',
        channelUri: '',
        sourceType: 'MANUAL',
        isAutoGenerated: false
      });
    } catch (err) {
      setError('채널 저장에 실패했습니다.');
    }
  };

  const handleEdit = (channel) => {
    setSelectedChannel(channel);
    setFormData({
      name: channel.name,
      description: channel.description,
      imageUrl: channel.imageUrl,
      channelUri: channel.channelUri,
      sourceType: channel.sourceType,
      isAutoGenerated: channel.isAutoGenerated
    });
    setShowEditModal(true);
  };

  const handleDelete = async (id) => {
    if (window.confirm('정말로 이 채널을 삭제하시겠습니까?')) {
      try {
        await deleteChannel(id);
        const response = await getSocialChannels();
        setChannels(response);
      } catch (err) {
        setError('채널 삭제에 실패했습니다.');
      }
    }
  };

  const handleApprove = async (channelId) => {
    try {
      await approveChannel(channelId, { status: 'APPROVED' });
      const response = await getSocialChannels();
      setChannels(response);
    } catch (err) {
      setError('채널 승인에 실패했습니다.');
    }
  };

  const handleReject = async (channelId) => {
    const reason = window.prompt('거절 사유를 입력해주세요:');
    if (reason) {
      try {
        await approveChannel(channelId, { 
          status: 'REJECTED',
          rejectionReason: reason
        });
        const response = await getSocialChannels();
        setChannels(response);
      } catch (err) {
        setError('채널 거절에 실패했습니다.');
      }
    }
  };

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow-md p-6">
        <div className="animate-pulse">
          <div className="h-4 bg-gray-200 rounded w-1/4 mx-auto mb-4"></div>
          <div className="flex justify-center space-x-4">
            <div className="w-14 h-14 bg-gray-200 rounded-full"></div>
            <div className="w-14 h-14 bg-gray-200 rounded-full"></div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-white rounded-lg shadow-md p-6">
        <p className="text-red-500 text-center">{error}</p>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <div className="bg-white rounded p-4 flex flex-col items-center">
        <div className="flex justify-between items-center w-full mb-4">
          <div className="font-bold text-gray-800">추천 채널</div>
          {isAdmin && (
            <div className="flex gap-4">
              <button
                onClick={() => setShowAddModal(true)}
                className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md transition-colors duration-200"
              >
                채널 추가
              </button>
            </div>
          )}
        </div>
        
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 w-full">
          {channels.map(channel => (
            <div key={channel.id} className="relative group">
              <a
                href={channel.channelUri}
                target="_blank"
                rel="noopener noreferrer"
                className="block transition-transform duration-150 hover:scale-110 hover:shadow-lg"
                title={channel.name}
              >
                <img
                  src={channel.imageUrl || getDefaultImage(channel.sourceType)}
                  alt={channel.name}
                  className="w-14 h-14 rounded-full border border-gray-200 object-cover bg-white shadow-sm"
                />
                <div className="text-sm text-center mt-1">{channel.name}</div>
              </a>
              
              {isAdmin && (
                <div className="absolute top-0 right-0 flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
                  <button
                    onClick={() => handleEdit(channel)}
                    className="p-1 bg-blue-500 text-white rounded-full hover:bg-blue-600"
                    title="수정"
                  >
                    ✎
                  </button>
                  <button
                    onClick={() => handleDelete(channel.id)}
                    className="p-1 bg-red-500 text-white rounded-full hover:bg-red-600"
                    title="삭제"
                  >
                    ×
                  </button>
                  {channel.approvalStatus === 'PENDING' && (
                    <>
                      <button
                        onClick={() => handleApprove(channel.id)}
                        className="p-1 bg-green-500 text-white rounded-full hover:bg-green-600"
                        title="승인"
                      >
                        ✓
                      </button>
                      <button
                        onClick={() => handleReject(channel.id)}
                        className="p-1 bg-yellow-500 text-white rounded-full hover:bg-yellow-600"
                        title="거절"
                      >
                        ✕
                      </button>
                    </>
                  )}
                </div>
              )}
              
              {channel.approvalStatus === 'REJECTED' && (
                <div className="absolute top-0 right-0 bg-red-500 text-white text-xs px-1 rounded">
                  거절됨
                </div>
              )}
            </div>
          ))}
        </div>
        
        <div className="text-xs text-gray-500 mt-4">팔로우/구독하고 좋아요도 눌러주세요!</div>
      </div>

      {/* 채널 추가/수정 모달 */}
      {(showAddModal || showEditModal) && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="bg-white p-6 rounded-lg w-96">
            <h2 className="text-xl font-bold mb-4">
              {showEditModal ? '채널 수정' : '채널 추가'}
            </h2>
            <form onSubmit={handleSubmit}>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700">이름</label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  required
                />
              </div>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700">설명</label>
                <textarea
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                />
              </div>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700">이미지 URL</label>
                <input
                  type="url"
                  name="imageUrl"
                  value={formData.imageUrl}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                />
              </div>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700">채널 URI</label>
                <input
                  type="url"
                  name="channelUri"
                  value={formData.channelUri}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  required
                />
              </div>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700">소스 타입</label>
                <select
                  name="sourceType"
                  value={formData.sourceType}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                >
                  <option value="MANUAL">수동</option>
                  <option value="RSS_FEED">RSS 피드</option>
                  <option value="API">API</option>
                  <option value="SCRAPING">스크래핑</option>
                </select>
              </div>
              <div className="mb-4">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    name="isAutoGenerated"
                    checked={formData.isAutoGenerated}
                    onChange={handleInputChange}
                    className="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  />
                  <span className="ml-2 text-sm text-gray-700">자동 생성</span>
                </label>
              </div>
              <div className="flex justify-end gap-2">
                <button
                  type="button"
                  onClick={() => {
                    setShowAddModal(false);
                    setShowEditModal(false);
                    setSelectedChannel(null);
                  }}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200"
                >
                  취소
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 text-sm font-medium text-white bg-blue-500 rounded-md hover:bg-blue-600"
                >
                  {showEditModal ? '수정' : '추가'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

function getDefaultImage(sourceType) {
  switch (sourceType) {
    case 'RSS_FEED':
      return 'https://cdn-icons-png.flaticon.com/512/1384/1384060.png';
    case 'API':
      return 'https://cdn-icons-png.flaticon.com/512/2111/2111463.png';
    default:
      return '';
  }
} 