import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Image,
  FlatList,
  ActivityIndicator,
  Alert,
  Modal,
  TextInput,
  ScrollView,
  Linking,
} from 'react-native';

// 타입 정의
interface Channel {
  id: number;
  name: string;
  description?: string;
  imageUrl?: string;
  channelUri: string;
  sourceType: 'MANUAL' | 'RSS_FEED' | 'API' | 'SCRAPING';
  isAutoGenerated: boolean;
  type: 'CHANNEL' | 'VIDEO';
  approvalStatus: 'APPROVED' | 'PENDING' | 'REJECTED';
  rejectionReason?: string;
}

interface User {
  id: number;
  role?: string;
}

const RecommendedChannels: React.FC = () => {
  // 임시 사용자 정보 (실제로는 Auth Context에서 가져와야 함)
  const user: User | null = null; // useAuth hook으로 대체
  
  const [channels, setChannels] = useState<Channel[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedChannel, setSelectedChannel] = useState<Channel | null>(null);
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    imageUrl: '',
    channelUri: '',
    sourceType: 'MANUAL' as const,
    isAutoGenerated: false,
    type: 'CHANNEL' as const,
  });

  useEffect(() => {
    fetchChannels();
  }, []);

  const fetchChannels = async () => {
    try {
      // Mock API 호출 (실제로는 getSocialChannels 호출)
      const response = await mockGetSocialChannels();
      
      setChannels(
        response.filter(
          (item) =>
            item.channelUri &&
            !item.channelUri.includes('watch?v=') &&
            (item.approvalStatus === 'APPROVED' ||
              (isAdmin && item.approvalStatus === 'PENDING'))
        )
      );
      setIsAdmin(user?.role === 'ADMIN');
    } catch (err) {
      setError('채널 정보를 불러오는데 실패했습니다.');
    } finally {
      setLoading(false);
    }
  };

  // Mock API 함수
  const mockGetSocialChannels = async (): Promise<Channel[]> => {
    return [
      {
        id: 1,
        name: 'YouTube 건강채널',
        description: '건강 관련 유튜브 채널',
        imageUrl: 'https://placehold.co/100x100/3b82f6/ffffff?text=YT',
        channelUri: 'https://youtube.com/@healthchannel',
        sourceType: 'MANUAL',
        isAutoGenerated: false,
        type: 'CHANNEL',
        approvalStatus: 'APPROVED',
      },
      {
        id: 2,
        name: '의료 정보 채널',
        description: '전문 의료 정보 제공',
        imageUrl: 'https://placehold.co/100x100/10b981/ffffff?text=MD',
        channelUri: 'https://youtube.com/@medicalinfo',
        sourceType: 'MANUAL',
        isAutoGenerated: false,
        type: 'CHANNEL',
        approvalStatus: 'APPROVED',
      },
    ];
  };

  const handleInputChange = (field: string, value: string | boolean) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleSubmit = async () => {
    try {
      if (selectedChannel) {
        // await updateChannel(selectedChannel.id, formData);
        console.log('채널 수정:', selectedChannel.id, formData);
      } else {
        // await createChannel(formData);
        console.log('채널 생성:', formData);
      }
      
      await fetchChannels();
      setShowAddModal(false);
      setShowEditModal(false);
      setSelectedChannel(null);
      resetFormData();
    } catch (err) {
      setError('채널 저장에 실패했습니다.');
    }
  };

  const resetFormData = () => {
    setFormData({
      name: '',
      description: '',
      imageUrl: '',
      channelUri: '',
      sourceType: 'MANUAL',
      isAutoGenerated: false,
      type: 'CHANNEL',
    });
  };

  const handleEdit = (channel: Channel) => {
    setSelectedChannel(channel);
    setFormData({
      name: channel.name,
      description: channel.description || '',
      imageUrl: channel.imageUrl || '',
      channelUri: channel.channelUri,
      sourceType: channel.sourceType,
      isAutoGenerated: channel.isAutoGenerated,
      type: 'CHANNEL',
    });
    setShowEditModal(true);
  };

  const handleDelete = (id: number) => {
    Alert.alert(
      '채널 삭제',
      '정말로 이 채널을 삭제하시겠습니까?',
      [
        { text: '취소', style: 'cancel' },
        {
          text: '삭제',
          style: 'destructive',
          onPress: async () => {
            try {
              // await deleteChannel(id);
              fetchChannels();
            } catch (err) {
              setError('채널 삭제에 실패했습니다.');
            }
          },
        },
      ]
    );
  };

  const handleChannelPress = async (channelUri: string) => {
    try {
      const supported = await Linking.canOpenURL(channelUri);
      if (supported) {
        await Linking.openURL(channelUri);
      } else {
        Alert.alert('오류', '링크를 열 수 없습니다.');
      }
    } catch (error) {
      Alert.alert('오류', '링크를 열 수 없습니다.');
    }
  };

  const getDefaultImage = (sourceType: string) => {
    switch (sourceType) {
      case 'RSS_FEED':
        return 'https://placehold.co/100x100/f59e0b/ffffff?text=RSS';
      case 'API':
        return 'https://placehold.co/100x100/8b5cf6/ffffff?text=API';
      default:
        return 'https://placehold.co/100x100/6b7280/ffffff?text=CH';
    }
  };

  const renderChannelItem = ({ item }: { item: Channel }) => (
    <TouchableOpacity
      style={styles.channelItem}
      onPress={() => handleChannelPress(item.channelUri)}
      activeOpacity={0.7}
    >
      <Image
        source={{
          uri: item.imageUrl || getDefaultImage(item.sourceType),
        }}
        style={styles.channelImage}
      />
      <Text style={styles.channelName} numberOfLines={2}>
        {item.name}
      </Text>
      
      {isAdmin && (
        <View style={styles.adminActions}>
          <TouchableOpacity
            style={styles.editButton}
            onPress={() => handleEdit(item)}
          >
            <Text style={styles.actionButtonText}>✎</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.deleteButton}
            onPress={() => handleDelete(item.id)}
          >
            <Text style={styles.actionButtonText}>×</Text>
          </TouchableOpacity>
        </View>
      )}
    </TouchableOpacity>
  );

  const renderModal = () => (
    <Modal
      visible={showAddModal || showEditModal}
      animationType="slide"
      transparent={true}
      onRequestClose={() => {
        setShowAddModal(false);
        setShowEditModal(false);
        setSelectedChannel(null);
      }}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.modalContainer}>
          <ScrollView showsVerticalScrollIndicator={false}>
            <Text style={styles.modalTitle}>
              {showEditModal ? '채널 수정' : '채널 추가'}
            </Text>
            
            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>이름</Text>
              <TextInput
                style={styles.textInput}
                value={formData.name}
                onChangeText={(text) => handleInputChange('name', text)}
                placeholder="채널 이름을 입력하세요"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>설명</Text>
              <TextInput
                style={[styles.textInput, styles.multilineInput]}
                value={formData.description}
                onChangeText={(text) => handleInputChange('description', text)}
                placeholder="채널 설명을 입력하세요"
                multiline
                numberOfLines={3}
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>이미지 URL</Text>
              <TextInput
                style={styles.textInput}
                value={formData.imageUrl}
                onChangeText={(text) => handleInputChange('imageUrl', text)}
                placeholder="https://example.com/image.jpg"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>채널 URI</Text>
              <TextInput
                style={styles.textInput}
                value={formData.channelUri}
                onChangeText={(text) => handleInputChange('channelUri', text)}
                placeholder="https://youtube.com/@channel"
              />
            </View>

            <View style={styles.modalActions}>
              <TouchableOpacity
                style={styles.cancelButton}
                onPress={() => {
                  setShowAddModal(false);
                  setShowEditModal(false);
                  setSelectedChannel(null);
                }}
              >
                <Text style={styles.cancelButtonText}>취소</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.submitButton}
                onPress={handleSubmit}
              >
                <Text style={styles.submitButtonText}>
                  {showEditModal ? '수정' : '추가'}
                </Text>
              </TouchableOpacity>
            </View>
          </ScrollView>
        </View>
      </View>
    </Modal>
  );

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#3B82F6" />
        <Text style={styles.loadingText}>채널을 불러오는 중...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>추천 채널</Text>
        {isAdmin && (
          <TouchableOpacity
            style={styles.addButton}
            onPress={() => setShowAddModal(true)}
          >
            <Text style={styles.addButtonText}>채널 추가</Text>
          </TouchableOpacity>
        )}
      </View>

      <FlatList
        data={channels}
        keyExtractor={(item) => item.id.toString()}
        renderItem={renderChannelItem}
        numColumns={4}
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.channelGrid}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Text style={styles.emptyText}>표시할 채널이 없습니다.</Text>
          </View>
        }
      />

      {renderModal()}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
  },
  loadingContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 40,
  },
  loadingText: {
    marginTop: 8,
    fontSize: 14,
    color: '#6B7280',
  },
  errorContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 40,
  },
  errorText: {
    fontSize: 14,
    color: '#EF4444',
    textAlign: 'center',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#111827',
  },
  addButton: {
    backgroundColor: '#3B82F6',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
  },
  addButtonText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '500',
  },
  channelGrid: {
    paddingBottom: 16,
  },
  channelItem: {
    flex: 1,
    alignItems: 'center',
    margin: 8,
    position: 'relative',
  },
  channelImage: {
    width: 56,
    height: 56,
    borderRadius: 28,
    backgroundColor: '#F3F4F6',
  },
  channelName: {
    marginTop: 8,
    fontSize: 12,
    color: '#374151',
    textAlign: 'center',
    minHeight: 32,
  },
  adminActions: {
    position: 'absolute',
    top: -4,
    right: -4,
    flexDirection: 'row',
    gap: 4,
  },
  editButton: {
    backgroundColor: '#3B82F6',
    width: 20,
    height: 20,
    borderRadius: 10,
    alignItems: 'center',
    justifyContent: 'center',
  },
  deleteButton: {
    backgroundColor: '#EF4444',
    width: 20,
    height: 20,
    borderRadius: 10,
    alignItems: 'center',
    justifyContent: 'center',
  },
  actionButtonText: {
    color: '#FFFFFF',
    fontSize: 10,
    fontWeight: 'bold',
  },
  emptyContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 40,
  },
  emptyText: {
    fontSize: 14,
    color: '#6B7280',
    textAlign: 'center',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 20,
    width: '90%',
    maxHeight: '80%',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#111827',
    marginBottom: 20,
    textAlign: 'center',
  },
  inputGroup: {
    marginBottom: 16,
  },
  inputLabel: {
    fontSize: 14,
    fontWeight: '500',
    color: '#374151',
    marginBottom: 8,
  },
  textInput: {
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    fontSize: 14,
    color: '#111827',
  },
  multilineInput: {
    height: 80,
    textAlignVertical: 'top',
  },
  modalActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 20,
    gap: 12,
  },
  cancelButton: {
    flex: 1,
    backgroundColor: '#F3F4F6',
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  cancelButtonText: {
    color: '#6B7280',
    fontSize: 14,
    fontWeight: '500',
  },
  submitButton: {
    flex: 1,
    backgroundColor: '#3B82F6',
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  submitButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '500',
  },
});

export default RecommendedChannels; 