import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Image,
  FlatList,
  ActivityIndicator,
  Alert,
  Modal,
  TextInput,
  ScrollView,
  Linking,
} from 'react-native';

// 타입 정의
interface Video {
  id: number;
  name: string;
  description?: string;
  imageUrl?: string;
  channelUri: string;
  sourceType: 'MANUAL' | 'RSS_FEED' | 'API' | 'SCRAPING';
  isAutoGenerated: boolean;
  type: 'CHANNEL' | 'VIDEO';
  approvalStatus: 'APPROVED' | 'PENDING' | 'REJECTED';
  rejectionReason?: string;
}

interface User {
  id: number;
  role?: string;
}

const RecommendedVideos: React.FC = () => {
  // 임시 사용자 정보 (실제로는 Auth Context에서 가져와야 함)
  const user: User | null = null; // useAuth hook으로 대체
  
  const [videos, setVideos] = useState<Video[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedVideo, setSelectedVideo] = useState<Video | null>(null);
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    imageUrl: '',
    channelUri: '',
    sourceType: 'MANUAL' as const,
    isAutoGenerated: false,
    type: 'VIDEO' as const,
  });

  useEffect(() => {
    fetchVideos();
  }, []);

  const fetchVideos = async () => {
    try {
      // Mock API 호출 (실제로는 getSocialChannels 호출)
      const response = await mockGetSocialChannels();
      
      setVideos(
        response.filter(
          (item) =>
            item.channelUri &&
            item.channelUri.includes('watch?v=') &&
            (item.approvalStatus === 'APPROVED' ||
              (isAdmin && item.approvalStatus === 'PENDING'))
        )
      );
      setIsAdmin(user?.role === 'ADMIN');
    } catch (err) {
      setError('영상 정보를 불러오는데 실패했습니다.');
    } finally {
      setLoading(false);
    }
  };

  // Mock API 함수
  const mockGetSocialChannels = async (): Promise<Video[]> => {
    return [
      {
        id: 1,
        name: '건강한 생활 습관',
        description: '건강한 생활을 위한 팁',
        imageUrl: 'https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg',
        channelUri: 'https://youtube.com/watch?v=dQw4w9WgXcQ',
        sourceType: 'MANUAL',
        isAutoGenerated: false,
        type: 'VIDEO',
        approvalStatus: 'APPROVED',
      },
      {
        id: 2,
        name: '의료진과의 대화',
        description: '전문의와의 건강 상담',
        imageUrl: 'https://img.youtube.com/vi/sample123/maxresdefault.jpg',
        channelUri: 'https://youtube.com/watch?v=sample123',
        sourceType: 'MANUAL',
        isAutoGenerated: false,
        type: 'VIDEO',
        approvalStatus: 'APPROVED',
      },
    ];
  };

  const extractYouTubeId = (url: string): string | null => {
    if (!url) return null;
    
    const patterns = [
      /(?:(?:www\.)?youtube\.com\/watch\?v=|youtu\.be\/|(?:www\.)?youtube\.com\/embed\/)([^&\n?#]+)/,
      /(?:www\.)?youtube\.com\/v\/([^&\n?#]+)/,
      /(?:www\.)?youtube\.com\/watch\?.*&v=([^&\n?#]+)/,
    ];

    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match && match[1]) {
        return match[1];
      }
    }

    return null;
  };

  const handleInputChange = (field: string, value: string | boolean) => {
    if (field === 'channelUri' && typeof value === 'string') {
      const videoId = extractYouTubeId(value);
      if (videoId) {
        const thumbnailUrl = `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`;
        setFormData((prev) => ({
          ...prev,
          channelUri: value,
          imageUrl: thumbnailUrl,
        }));
        return;
      }
    }
    
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const refreshThumbnail = (quality = 'maxresdefault') => {
    const videoId = extractYouTubeId(formData.channelUri);
    if (videoId) {
      const thumbnailUrl = `https://img.youtube.com/vi/${videoId}/${quality}.jpg`;
      setFormData((prev) => ({
        ...prev,
        imageUrl: thumbnailUrl,
      }));
    } else {
      Alert.alert('오류', '유효한 YouTube URL을 먼저 입력해주세요.');
    }
  };

  const handleSubmit = async () => {
    try {
      if (selectedVideo) {
        // await updateChannel(selectedVideo.id, formData);
        console.log('영상 수정:', selectedVideo.id, formData);
      } else {
        // await createChannel(formData);
        console.log('영상 생성:', formData);
      }
      
      await fetchVideos();
      setShowAddModal(false);
      setShowEditModal(false);
      setSelectedVideo(null);
      resetFormData();
    } catch (err) {
      setError('영상 저장에 실패했습니다.');
    }
  };

  const resetFormData = () => {
    setFormData({
      name: '',
      description: '',
      imageUrl: '',
      channelUri: '',
      sourceType: 'MANUAL',
      isAutoGenerated: false,
      type: 'VIDEO',
    });
  };

  const handleEdit = (video: Video) => {
    setSelectedVideo(video);
    setFormData({
      name: video.name,
      description: video.description || '',
      imageUrl: video.imageUrl || '',
      channelUri: video.channelUri,
      sourceType: video.sourceType,
      isAutoGenerated: video.isAutoGenerated,
      type: 'VIDEO',
    });
    setShowEditModal(true);
  };

  const handleDelete = (id: number) => {
    Alert.alert(
      '영상 삭제',
      '정말로 이 영상을 삭제하시겠습니까?',
      [
        { text: '취소', style: 'cancel' },
        {
          text: '삭제',
          style: 'destructive',
          onPress: async () => {
            try {
              // await deleteChannel(id);
              fetchVideos();
            } catch (err) {
              setError('영상 삭제에 실패했습니다.');
            }
          },
        },
      ]
    );
  };

  const handleVideoPress = async (channelUri: string) => {
    try {
      const supported = await Linking.canOpenURL(channelUri);
      if (supported) {
        await Linking.openURL(channelUri);
      } else {
        Alert.alert('오류', '링크를 열 수 없습니다.');
      }
    } catch (error) {
      Alert.alert('오류', '링크를 열 수 없습니다.');
    }
  };

  const getDefaultImage = (sourceType: string) => {
    switch (sourceType) {
      case 'RSS_FEED':
        return 'https://placehold.co/300x200/f59e0b/ffffff?text=RSS';
      case 'API':
        return 'https://placehold.co/300x200/8b5cf6/ffffff?text=API';
      default:
        return 'https://placehold.co/300x200/6b7280/ffffff?text=VIDEO';
    }
  };

  const renderVideoItem = ({ item }: { item: Video }) => (
    <TouchableOpacity
      style={styles.videoItem}
      onPress={() => handleVideoPress(item.channelUri)}
      activeOpacity={0.7}
    >
      <View style={styles.videoImageContainer}>
        <Image
          source={{
            uri: item.imageUrl || getDefaultImage(item.sourceType),
          }}
          style={styles.videoImage}
        />
        
        {isAdmin && (
          <View style={styles.adminActions}>
            <TouchableOpacity
              style={styles.editButton}
              onPress={() => handleEdit(item)}
            >
              <Text style={styles.actionButtonText}>✎</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.deleteButton}
              onPress={() => handleDelete(item.id)}
            >
              <Text style={styles.actionButtonText}>×</Text>
            </TouchableOpacity>
          </View>
        )}
      </View>
      
      <Text style={styles.videoName} numberOfLines={2}>
        {item.name}
      </Text>
    </TouchableOpacity>
  );

  const renderModal = () => (
    <Modal
      visible={showAddModal || showEditModal}
      animationType="slide"
      transparent={true}
      onRequestClose={() => {
        setShowAddModal(false);
        setShowEditModal(false);
        setSelectedVideo(null);
      }}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.modalContainer}>
          <ScrollView showsVerticalScrollIndicator={false}>
            <Text style={styles.modalTitle}>
              {showEditModal ? '영상 수정' : '영상 추가'}
            </Text>
            
            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>제목</Text>
              <TextInput
                style={styles.textInput}
                value={formData.name}
                onChangeText={(text) => handleInputChange('name', text)}
                placeholder="영상 제목을 입력하세요"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>설명</Text>
              <TextInput
                style={[styles.textInput, styles.multilineInput]}
                value={formData.description}
                onChangeText={(text) => handleInputChange('description', text)}
                placeholder="영상 설명을 입력하세요"
                multiline
                numberOfLines={3}
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>영상 URL</Text>
              <TextInput
                style={styles.textInput}
                value={formData.channelUri}
                onChangeText={(text) => handleInputChange('channelUri', text)}
                placeholder="https://www.youtube.com/watch?v=..."
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>썸네일 URL</Text>
              <View style={styles.thumbnailContainer}>
                <TextInput
                  style={styles.textInput}
                  value={formData.imageUrl}
                  onChangeText={(text) => handleInputChange('imageUrl', text)}
                  placeholder="썸네일 URL"
                />
                
                <View style={styles.thumbnailActions}>
                  <TouchableOpacity
                    style={styles.refreshButton}
                    onPress={() => refreshThumbnail()}
                  >
                    <Text style={styles.refreshButtonText}>🔄 새로고침</Text>
                  </TouchableOpacity>
                </View>

                <View style={styles.qualityButtons}>
                  <TouchableOpacity
                    style={styles.qualityButton}
                    onPress={() => refreshThumbnail('maxresdefault')}
                  >
                    <Text style={styles.qualityButtonText}>고화질</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={styles.qualityButton}
                    onPress={() => refreshThumbnail('hqdefault')}
                  >
                    <Text style={styles.qualityButtonText}>중화질</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={styles.qualityButton}
                    onPress={() => refreshThumbnail('mqdefault')}
                  >
                    <Text style={styles.qualityButtonText}>저화질</Text>
                  </TouchableOpacity>
                </View>

                {formData.imageUrl && (
                  <Image
                    source={{ uri: formData.imageUrl }}
                    style={styles.thumbnailPreview}
                  />
                )}
              </View>
            </View>

            <View style={styles.modalActions}>
              <TouchableOpacity
                style={styles.cancelButton}
                onPress={() => {
                  setShowAddModal(false);
                  setShowEditModal(false);
                  setSelectedVideo(null);
                }}
              >
                <Text style={styles.cancelButtonText}>취소</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.submitButton}
                onPress={handleSubmit}
              >
                <Text style={styles.submitButtonText}>
                  {showEditModal ? '수정' : '추가'}
                </Text>
              </TouchableOpacity>
            </View>
          </ScrollView>
        </View>
      </View>
    </Modal>
  );

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#3B82F6" />
        <Text style={styles.loadingText}>영상을 불러오는 중...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>추천 영상</Text>
        {isAdmin && (
          <TouchableOpacity
            style={styles.addButton}
            onPress={() => setShowAddModal(true)}
          >
            <Text style={styles.addButtonText}>영상 추가</Text>
          </TouchableOpacity>
        )}
      </View>

      <FlatList
        data={videos}
        keyExtractor={(item) => item.id.toString()}
        renderItem={renderVideoItem}
        numColumns={2}
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.videoGrid}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Text style={styles.emptyText}>표시할 영상이 없습니다.</Text>
          </View>
        }
      />

      {renderModal()}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
  },
  loadingContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 40,
  },
  loadingText: {
    marginTop: 8,
    fontSize: 14,
    color: '#6B7280',
  },
  errorContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 40,
  },
  errorText: {
    fontSize: 14,
    color: '#EF4444',
    textAlign: 'center',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#111827',
  },
  addButton: {
    backgroundColor: '#3B82F6',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
  },
  addButtonText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '500',
  },
  videoGrid: {
    paddingBottom: 16,
  },
  videoItem: {
    flex: 1,
    margin: 8,
    backgroundColor: '#F9FAFB',
    borderRadius: 12,
    overflow: 'hidden',
  },
  videoImageContainer: {
    position: 'relative',
  },
  videoImage: {
    width: '100%',
    aspectRatio: 16 / 9,
    backgroundColor: '#E5E7EB',
  },
  adminActions: {
    position: 'absolute',
    top: 8,
    right: 8,
    flexDirection: 'row',
    gap: 4,
  },
  editButton: {
    backgroundColor: '#3B82F6',
    width: 24,
    height: 24,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
  },
  deleteButton: {
    backgroundColor: '#EF4444',
    width: 24,
    height: 24,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
  },
  actionButtonText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: 'bold',
  },
  videoName: {
    padding: 12,
    fontSize: 14,
    color: '#374151',
    fontWeight: '500',
    minHeight: 44,
  },
  emptyContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 40,
  },
  emptyText: {
    fontSize: 14,
    color: '#6B7280',
    textAlign: 'center',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 20,
    width: '90%',
    maxHeight: '80%',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#111827',
    marginBottom: 20,
    textAlign: 'center',
  },
  inputGroup: {
    marginBottom: 16,
  },
  inputLabel: {
    fontSize: 14,
    fontWeight: '500',
    color: '#374151',
    marginBottom: 8,
  },
  textInput: {
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    fontSize: 14,
    color: '#111827',
  },
  multilineInput: {
    height: 80,
    textAlignVertical: 'top',
  },
  thumbnailContainer: {
    gap: 8,
  },
  thumbnailActions: {
    alignItems: 'center',
  },
  refreshButton: {
    backgroundColor: '#10B981',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 6,
  },
  refreshButtonText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '500',
  },
  qualityButtons: {
    flexDirection: 'row',
    gap: 4,
  },
  qualityButton: {
    backgroundColor: '#3B82F6',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 4,
  },
  qualityButtonText: {
    color: '#FFFFFF',
    fontSize: 10,
    fontWeight: '500',
  },
  thumbnailPreview: {
    width: 128,
    height: 72,
    borderRadius: 6,
    alignSelf: 'center',
  },
  modalActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 20,
    gap: 12,
  },
  cancelButton: {
    flex: 1,
    backgroundColor: '#F3F4F6',
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  cancelButtonText: {
    color: '#6B7280',
    fontSize: 14,
    fontWeight: '500',
  },
  submitButton: {
    flex: 1,
    backgroundColor: '#3B82F6',
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  submitButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '500',
  },
});

export default RecommendedVideos; 