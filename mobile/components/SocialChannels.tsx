import React, { useState, useEffect } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  ScrollView, 
  TouchableOpacity, 
  Image, 
  Modal, 
  TextInput,
  Switch,
  Alert,
  Linking 
} from 'react-native';

interface SocialChannel {
  id: number;
  name: string;
  description: string;
  imageUrl: string;
  channelUri: string;
  sourceType: 'MANUAL' | 'RSS_FEED' | 'API' | 'SCRAPING';
  isAutoGenerated: boolean;
  approvalStatus?: 'PENDING' | 'APPROVED' | 'REJECTED';
  rejectionReason?: string;
}

const SocialChannels = () => {
  const [channels, setChannels] = useState<SocialChannel[]>([]);
  const [loading, setLoading] = useState(true);
  const [isAdmin, setIsAdmin] = useState(false); // TODO: 실제 권한 체크
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedChannel, setSelectedChannel] = useState<SocialChannel | null>(null);
  const [formData, setFormData] = useState<{
    name: string;
    description: string;
    imageUrl: string;
    channelUri: string;
    sourceType: 'MANUAL' | 'RSS_FEED' | 'API' | 'SCRAPING';
    isAutoGenerated: boolean;
  }>({
    name: '',
    description: '',
    imageUrl: '',
    channelUri: '',
    sourceType: 'MANUAL',
    isAutoGenerated: false
  });

  useEffect(() => {
    // TODO: 실제 API 호출로 대체
    const mockChannels: SocialChannel[] = [
      {
        id: 1,
        name: '삐뽀삐뽀119 공식',
        description: '공식 채널입니다',
        imageUrl: 'https://via.placeholder.com/60x60',
        channelUri: 'https://www.youtube.com/@bippobippo119',
        sourceType: 'MANUAL',
        isAutoGenerated: false,
        approvalStatus: 'APPROVED'
      },
      {
        id: 2,
        name: '의료정보 채널',
        description: '유용한 의료정보를 제공합니다',
        imageUrl: 'https://via.placeholder.com/60x60',
        channelUri: 'https://www.youtube.com/@medical-info',
        sourceType: 'RSS_FEED',
        isAutoGenerated: true,
        approvalStatus: 'APPROVED'
      },
    ];
    
    setChannels(mockChannels);
    setIsAdmin(true); // TODO: 실제 권한 체크
    setLoading(false);
  }, []);

  const handleChannelPress = (channelUri: string) => {
    Linking.openURL(channelUri);
  };

  const handleAddChannel = () => {
    setSelectedChannel(null);
    setFormData({
      name: '',
      description: '',
      imageUrl: '',
      channelUri: '',
      sourceType: 'MANUAL',
      isAutoGenerated: false
    });
    setShowAddModal(true);
  };

  const handleEditChannel = (channel: SocialChannel) => {
    setSelectedChannel(channel);
    setFormData({
      name: channel.name,
      description: channel.description,
      imageUrl: channel.imageUrl,
      channelUri: channel.channelUri,
      sourceType: channel.sourceType,
      isAutoGenerated: channel.isAutoGenerated
    });
    setShowEditModal(true);
  };

  const handleDeleteChannel = (channelId: number) => {
    Alert.alert(
      '채널 삭제',
      '정말로 이 채널을 삭제하시겠습니까?',
      [
        { text: '취소', style: 'cancel' },
        { 
          text: '삭제', 
          style: 'destructive',
          onPress: () => {
            // TODO: 실제 API 호출
            setChannels(channels.filter(c => c.id !== channelId));
          }
        }
      ]
    );
  };

  const handleSubmit = () => {
    if (!formData.name || !formData.channelUri) {
      Alert.alert('오류', '이름과 채널 URI는 필수입니다.');
      return;
    }

    if (selectedChannel) {
      // 수정
      setChannels(channels.map(c => 
        c.id === selectedChannel.id 
          ? { ...c, ...formData }
          : c
      ));
    } else {
      // 추가
      const newChannel: SocialChannel = {
        id: Date.now(),
        ...formData,
        approvalStatus: 'APPROVED'
      };
      setChannels([...channels, newChannel]);
    }

    setShowAddModal(false);
    setShowEditModal(false);
    setSelectedChannel(null);
  };

  const getDefaultImage = (sourceType: string) => {
    switch (sourceType) {
      case 'RSS_FEED':
        return 'https://cdn-icons-png.flaticon.com/512/1384/1384060.png';
      case 'API':
        return 'https://cdn-icons-png.flaticon.com/512/2111/2111463.png';
      default:
        return 'https://via.placeholder.com/60x60';
    }
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <Text style={styles.loadingText}>로딩 중...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>추천 채널</Text>
        {isAdmin && (
          <TouchableOpacity style={styles.addButton} onPress={handleAddChannel}>
            <Text style={styles.addButtonText}>채널 추가</Text>
          </TouchableOpacity>
        )}
      </View>

      <ScrollView style={styles.scrollContainer} showsVerticalScrollIndicator={false}>
        <View style={styles.grid}>
          {channels.map((channel) => (
            <View key={channel.id} style={styles.channelContainer}>
              <TouchableOpacity
                style={styles.channelButton}
                onPress={() => handleChannelPress(channel.channelUri)}
                activeOpacity={0.8}
              >
                <Image
                  source={{ uri: channel.imageUrl || getDefaultImage(channel.sourceType) }}
                  style={styles.channelImage}
                />
                <Text style={styles.channelName} numberOfLines={2}>
                  {channel.name}
                </Text>
              </TouchableOpacity>

              {isAdmin && (
                <View style={styles.adminControls}>
                  <TouchableOpacity
                    style={[styles.controlButton, styles.editButton]}
                    onPress={() => handleEditChannel(channel)}
                  >
                    <Text style={styles.controlButtonText}>✎</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={[styles.controlButton, styles.deleteButton]}
                    onPress={() => handleDeleteChannel(channel.id)}
                  >
                    <Text style={styles.controlButtonText}>×</Text>
                  </TouchableOpacity>
                </View>
              )}

              {channel.approvalStatus === 'REJECTED' && (
                <View style={styles.rejectedBadge}>
                  <Text style={styles.rejectedText}>거절됨</Text>
                </View>
              )}
            </View>
          ))}
        </View>
      </ScrollView>

      <Text style={styles.footer}>팔로우/구독하고 좋아요도 눌러주세요!</Text>

      {/* 채널 추가/수정 모달 */}
      <Modal
        visible={showAddModal || showEditModal}
        animationType="slide"
        transparent={true}
        onRequestClose={() => {
          setShowAddModal(false);
          setShowEditModal(false);
        }}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContainer}>
            <Text style={styles.modalTitle}>
              {showEditModal ? '채널 수정' : '채널 추가'}
            </Text>

            <TextInput
              style={styles.input}
              placeholder="채널 이름"
              value={formData.name}
              onChangeText={(text) => setFormData({...formData, name: text})}
            />

            <TextInput
              style={styles.input}
              placeholder="설명"
              value={formData.description}
              onChangeText={(text) => setFormData({...formData, description: text})}
              multiline
              numberOfLines={3}
            />

            <TextInput
              style={styles.input}
              placeholder="이미지 URL"
              value={formData.imageUrl}
              onChangeText={(text) => setFormData({...formData, imageUrl: text})}
            />

            <TextInput
              style={styles.input}
              placeholder="채널 URI"
              value={formData.channelUri}
              onChangeText={(text) => setFormData({...formData, channelUri: text})}
            />

            <View style={styles.switchContainer}>
              <Text style={styles.switchLabel}>자동 생성</Text>
              <Switch
                value={formData.isAutoGenerated}
                onValueChange={(value) => setFormData({...formData, isAutoGenerated: value})}
              />
            </View>

            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={[styles.modalButton, styles.cancelButton]}
                onPress={() => {
                  setShowAddModal(false);
                  setShowEditModal(false);
                }}
              >
                <Text style={styles.cancelButtonText}>취소</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.modalButton, styles.submitButton]}
                onPress={handleSubmit}
              >
                <Text style={styles.submitButtonText}>
                  {showEditModal ? '수정' : '추가'}
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    marginVertical: 16,
  },
  loadingContainer: {
    padding: 40,
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
    color: '#666',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  addButton: {
    backgroundColor: '#3b82f6',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 6,
  },
  addButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },
  scrollContainer: {
    maxHeight: 300,
  },
  grid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  channelContainer: {
    width: '48%',
    marginBottom: 16,
    position: 'relative',
  },
  channelButton: {
    alignItems: 'center',
    padding: 8,
  },
  channelImage: {
    width: 56,
    height: 56,
    borderRadius: 28,
    borderWidth: 1,
    borderColor: '#e5e7eb',
    backgroundColor: 'white',
  },
  channelName: {
    fontSize: 12,
    textAlign: 'center',
    marginTop: 8,
    color: '#333',
    fontWeight: '500',
  },
  adminControls: {
    position: 'absolute',
    top: 0,
    right: 0,
    flexDirection: 'row',
  },
  controlButton: {
    width: 20,
    height: 20,
    borderRadius: 10,
    alignItems: 'center',
    justifyContent: 'center',
    marginLeft: 2,
  },
  editButton: {
    backgroundColor: '#3b82f6',
  },
  deleteButton: {
    backgroundColor: '#ef4444',
  },
  controlButtonText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  rejectedBadge: {
    position: 'absolute',
    top: 0,
    right: 0,
    backgroundColor: '#ef4444',
    paddingHorizontal: 4,
    paddingVertical: 2,
    borderRadius: 4,
  },
  rejectedText: {
    color: 'white',
    fontSize: 10,
  },
  footer: {
    fontSize: 12,
    color: '#666',
    textAlign: 'center',
    marginTop: 16,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContainer: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 20,
    width: '90%',
    maxWidth: 400,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 8,
    padding: 12,
    marginBottom: 16,
    fontSize: 16,
  },
  switchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  switchLabel: {
    fontSize: 16,
    color: '#333',
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 12,
  },
  modalButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  cancelButton: {
    backgroundColor: '#f3f4f6',
  },
  submitButton: {
    backgroundColor: '#3b82f6',
  },
  cancelButtonText: {
    color: '#6b7280',
    fontSize: 16,
    fontWeight: '600',
  },
  submitButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
});

export default SocialChannels; 