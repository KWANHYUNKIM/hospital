import axios from '../utils/axios';
import { getApiUrl } from '../utils/api';

// 타입 정의
interface SocialChannel {
  id: number;
  name: string;
  description: string;
  imageUrl: string;
  channelUri: string;
  sourceType: 'MANUAL' | 'RSS_FEED' | 'API' | 'SCRAPING';
  isAutoGenerated: boolean;
  approvalStatus: 'PENDING' | 'APPROVED' | 'REJECTED';
  rejectionReason?: string;
  categoryId?: number;
  createdAt: string;
  updatedAt: string;
}

interface CreateChannelData {
  name: string;
  description: string;
  imageUrl?: string;
  channelUri: string;
  sourceType: 'MANUAL' | 'RSS_FEED' | 'API' | 'SCRAPING';
  isAutoGenerated?: boolean;
  categoryId?: number;
}

interface UpdateChannelData extends Partial<CreateChannelData> {
  id: number;
}

interface ChannelApprovalData {
  status: 'APPROVED' | 'REJECTED';
  rejectionReason?: string;
}

interface Category {
  id: number;
  name: string;
  description?: string;
  createdAt: string;
  updatedAt: string;
}

const API_URL = getApiUrl();

/**
 * 채널 목록 조회
 * @returns Promise<SocialChannel[]> 소셜 채널 목록
 */
export const getSocialChannels = async (): Promise<SocialChannel[]> => {
  try {
    const response = await axios.get(`${API_URL}/api/channels`);
    return response.data;
  } catch (error) {
    console.error('소셜 채널 목록 조회 실패:', error);
    throw error;
  }
};

/**
 * 채널 생성
 * @param channelData 채널 데이터
 * @returns Promise<SocialChannel> 생성된 채널
 */
export const createChannel = async (channelData: CreateChannelData): Promise<SocialChannel> => {
  try {
    const response = await axios.post(`${API_URL}/api/channels`, channelData);
    return response.data;
  } catch (error) {
    console.error('채널 생성 실패:', error);
    throw error;
  }
};

/**
 * 채널 수정
 * @param id 채널 ID
 * @param channelData 수정할 채널 데이터
 * @returns Promise<SocialChannel> 수정된 채널
 */
export const updateChannel = async (id: number, channelData: Partial<CreateChannelData>): Promise<SocialChannel> => {
  try {
    const response = await axios.put(`${API_URL}/api/channels/${id}`, channelData);
    return response.data;
  } catch (error) {
    console.error('채널 수정 실패:', error);
    throw error;
  }
};

/**
 * 채널 삭제
 * @param id 채널 ID
 * @returns Promise<void>
 */
export const deleteChannel = async (id: number): Promise<void> => {
  try {
    await axios.delete(`${API_URL}/api/channels/${id}`);
  } catch (error) {
    console.error('채널 삭제 실패:', error);
    throw error;
  }
};

/**
 * 채널 승인/거절
 * @param id 채널 ID
 * @param approvalData 승인/거절 데이터
 * @returns Promise<SocialChannel> 승인/거절된 채널
 */
export const approveChannel = async (id: number, approvalData: ChannelApprovalData): Promise<SocialChannel> => {
  try {
    const response = await axios.post(`${API_URL}/api/channels/${id}/approve`, approvalData);
    return response.data;
  } catch (error) {
    console.error('채널 승인/거절 실패:', error);
    throw error;
  }
};

/**
 * 소셜 채널 상세 조회
 * @param id 채널 ID
 * @returns Promise<SocialChannel> 채널 상세 정보
 */
export const getSocialChannelDetail = async (id: number): Promise<SocialChannel> => {
  try {
    const response = await axios.get(`${API_URL}/api/social-channels/${id}`);
    return response.data;
  } catch (error) {
    console.error('소셜 채널 상세 조회 실패:', error);
    throw error;
  }
};

/**
 * 카테고리 목록 조회
 * @returns Promise<Category[]> 카테고리 목록
 */
export const getCategories = async (): Promise<Category[]> => {
  try {
    const response = await axios.get(`${API_URL}/api/categories`);
    return response.data;
  } catch (error) {
    console.error('카테고리 목록 조회 실패:', error);
    throw error;
  }
};

/**
 * 카테고리별 채널 조회
 * @param categoryId 카테고리 ID
 * @returns Promise<SocialChannel[]> 카테고리별 채널 목록
 */
export const getChannelsByCategory = async (categoryId: number): Promise<SocialChannel[]> => {
  try {
    const response = await axios.get(`${API_URL}/api/channels/category/${categoryId}`);
    return response.data;
  } catch (error) {
    console.error('카테고리별 채널 조회 실패:', error);
    throw error;
  }
};

/**
 * 인기 채널 조회
 * @param limit 조회할 채널 수 (기본값: 10)
 * @returns Promise<SocialChannel[]> 인기 채널 목록
 */
export const getPopularChannels = async (limit: number = 10): Promise<SocialChannel[]> => {
  try {
    const response = await axios.get(`${API_URL}/api/channels/popular`, {
      params: { limit }
    });
    return response.data;
  } catch (error) {
    console.error('인기 채널 조회 실패:', error);
    throw error;
  }
};

export default {
  getSocialChannels,
  createChannel,
  updateChannel,
  deleteChannel,
  approveChannel,
  getSocialChannelDetail,
  getCategories,
  getChannelsByCategory,
  getPopularChannels,
}; 